/*
 * Copyright (c) Heru Himawan Tejo Laksono. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holders nor the names of its
 *    contributors may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package fdaf.webapp.bean.system;

import fdaf.base.AdministratorAccountCheckerInterface;
import fdaf.base.CommonConfigurationInterface;
import fdaf.base.DatabaseServiceCheckerInterface;
import fdaf.base.FacadeInterface;
import fdaf.base.MailerInterface;
import fdaf.base.UserSessionManagerInterface;
import fdaf.webapp.base.AbstractBaseWebAppBean;
import fdaf.webapp.base.WebAppOpMode;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.InputStream;
import java.io.Serializable;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.SecureRandom;
import java.text.DateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Properties;
import java.util.Random;
import javax.ejb.EJB;
import javax.faces.event.AbortProcessingException;
import javax.faces.event.AjaxBehaviorEvent;
import javax.faces.event.ComponentSystemEvent;
import javax.faces.view.ViewScoped;
import javax.inject.Inject;
import javax.inject.Named;

@ViewScoped
@Named
public class MailerConfigurationWebAppBean extends AbstractBaseWebAppBean implements Serializable {

    private static final Logger LOGGER = Logger.getLogger(MailerConfigurationWebAppBean.class.getName());
    
    private static final long serialVersionUID = 1L;
    
    private static final String MASTER_PASSWORD_FMT = "# SET ADMINISTRATOR ACCOUNT master password\n"
        +   "# Generated at: %s\n\n"
        +   "# WARNING:\n# Do not edit this file to avoid trouble in processing SET ADMINISTRATOR ACCOUNT.\n\n"
        +   "# Use the master password bellow to unlock SET ADMINISTRATOR ACCOUNT:\n\n%s";
        
    private static final String ALPHABET = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    
    private static final Random RANDOM = new SecureRandom();
    
    @EJB(lookup = "java:global/__EJB_LOOKUP_DIR__/AdministratorAccountCheckerFacade")
    private AdministratorAccountCheckerInterface admAccountChecker; 
      
    @EJB(lookup = "java:global/__EJB_LOOKUP_DIR__/DatabaseServiceCheckerFacade")
    private DatabaseServiceCheckerInterface dbServiceChecker;
    
    @EJB(lookup = "java:global/__EJB_LOOKUP_DIR__/UserSessionManagerFacade")
    private UserSessionManagerInterface userSessionManager;
    
    @EJB(lookup = "java:global/__EJB_LOOKUP_DIR__/MailerService")
    private MailerInterface mailer;
    
    @EJB(lookup = "java:global/__EJB_LOOKUP_DIR__/CommonConfigurationService")
    private CommonConfigurationInterface commonConfiguration;
    
    private String masterPasswordFileAddr;
    private String masterPassword;
    private String unlockPassword;
    
    private boolean initialized;
    private boolean prepareSave;
    private boolean inSaving;

    private boolean starttls;
    private boolean useSSL;
    private boolean auth;
    
    private String domain = "localhost";
    private String host = "localhost";
    
    private String passBackup = "";
    private String user = "";
    private String pass = "";
    
    private Integer port = 25;
    
    private String configPath = "";
    
    @Inject
    private Controller controller;
    
    public MailerConfigurationWebAppBean() {
        // NO-OP
    }
    
    protected Controller getController() {
        return controller;
    }
    
    protected CommonConfigurationInterface getCommonConfiguration() {
        return commonConfiguration;
    }
    
    public void initMailerConfiguration(ComponentSystemEvent event) throws AbortProcessingException {
    
        boolean isUNIX = (!System.getProperty("os.name").matches(".*Windows.*"));
        String fsp = File.separator;
        Path configDirPath = null;
        String userHome = null;
        
        try {
            if (isUNIX) {
                userHome = System.getProperty("user.home");
                masterPasswordFileAddr  = userHome + fsp + "." + getApplicationCodeName() + fsp + "master-password.txt";
                configDirPath = Paths.get(userHome + fsp + "." + getApplicationCodeName());
            } else {
                masterPasswordFileAddr  = "C:\\" + getApplicationCodeName() + "\\master-password.txt";
                configDirPath = Paths.get("C:\\" + getApplicationCodeName());
            }
        } catch (Exception e) {
            addMessage(SV_ERROR, "readHomeDirectoryFailed");
            LOGGER.log(Level.SEVERE, null, e);
            return;
        }
        
        try {
            if (!Files.exists(configDirPath)) {
                Files.createDirectory(configDirPath);
            }
        } catch (Exception e) {
            addMessage(SV_ERROR, "createConfigDirectoryFailed");
            LOGGER.log(Level.SEVERE, null, e);
            return;
        }
        
        try {
            if (!Files.exists(Paths.get(masterPasswordFileAddr))) {
                generatePassword();
            } else {
                masterPassword = "";
                for (String line : Files.readAllLines(Paths.get(masterPasswordFileAddr))) {
                    if ((line.trim().length() == 12) && line.trim().matches(".*[a-z]+.*")
                        && line.trim().matches(".*[0-9]+.*") && !line.matches("^\\#.*")) {
                        masterPassword += line.trim();
                        break;
                    }
                }
                if ((masterPassword.length() != 12) || !masterPassword.matches(".*[a-z]+.*")
                    || !masterPassword.matches(".*[0-9]+.*")) {
                    generatePassword();
                }
            }
        } catch (Exception e) {
            addMessage(SV_ERROR, "createMasterPasswordFileFailed");
            LOGGER.log(Level.SEVERE, null, e);
            return;
        }
        
        if (inSaving) {
            return;
        }
        
        if (!isUNIX) {
            try {
                configPath = "C:\\" + getApplicationCodeName() + "\\" + getApplicationCodeName() + "-mail.conf";
                if (Files.exists(Paths.get(configPath))) {
                    loadConfig();
                    return;
                }
            } catch (Exception e) {
            }
        } else {
            try {
                configPath = userHome + fsp + "." + getApplicationCodeName() + fsp + getApplicationCodeName() + "-mail.conf";
                if (Files.exists(Paths.get(configPath))) {
                    loadConfig();
                    return;
                }
            } catch (Exception e) {
            }
            try {
                configPath = "/usr/local/etc/" + getApplicationCodeName() + "/" + getApplicationCodeName() + "-mail.conf";
                if (Files.exists(Paths.get(configPath))) {
                    loadConfig();
                    return;
                }
            } catch (Exception e) {
            }
            try {
                configPath = "/etc/" + getApplicationCodeName() + "/" + getApplicationCodeName() + "-mail.conf";
                if (Files.exists(Paths.get(configPath))) {
                    loadConfig();
                    return;
                }
            } catch (Exception e) {
            }
        }
        
        if (isUNIX) {
            configPath = userHome + fsp + "." + getApplicationCodeName() + fsp + getApplicationCodeName() + "-mail.conf";
        } else {
            configPath = "C:\\" + getApplicationCodeName() + "\\" + getApplicationCodeName() + "-mail.conf";
        }
    }
    
    private void loadConfig() {
        try {
            InputStream input = new FileInputStream(configPath);
            
            Properties prop = new Properties();
            prop.load(input);
            
            useSSL = Boolean.parseBoolean(prop.getProperty("useSSL"));
            auth = Boolean.parseBoolean(prop.getProperty("auth"));
            starttls = Boolean.parseBoolean(prop.getProperty("starttls"));
            host = prop.getProperty("host");
            user = prop.getProperty("user");
            pass = prop.getProperty("pass");
            passBackup = pass;
            
            try {
                port = Integer.parseInt(prop.getProperty("port"));
            } catch (Exception e) {
                port = 25;
            }
            domain = prop.getProperty("domain");
            
        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, null, e);
            return;
        }
    }
    
    private void generatePassword() throws Exception {
        StringBuilder password = new StringBuilder(12);
        for (int i = 0; i < 12; i++) {
            password.append(ALPHABET.charAt(RANDOM.nextInt(ALPHABET.length())));
        }
        masterPassword = new String(password);
        DateFormat dateFormatter = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.SHORT);
        Date timeStamp = new Date();
        FileWriter fw = new FileWriter(masterPasswordFileAddr, false);
        fw.write(String.format(MASTER_PASSWORD_FMT, dateFormatter.format(timeStamp), masterPassword));
        fw.close();
    }
    
    public void setUnlockPassword(String unlockPassword) {
        this.unlockPassword = unlockPassword;
    }

    public String getUnlockPassword() {
        return unlockPassword;
    }

    public String getMasterPasswordFileAddr() {
        return masterPasswordFileAddr;
    }

    protected AdministratorAccountCheckerInterface getAdministratorAccountChecker() {
        return admAccountChecker;
    }
    
    @Override
    protected DatabaseServiceCheckerInterface getDatabaseServiceChecker() {
        return dbServiceChecker;
    }
    
    public UserSessionManagerInterface getUserSessionManager() {
        return userSessionManager;
    }
    
    public void setHost(String host) {
        this.host = host;
    }
    
    public String getHost() {
        return host;
    }
    
    public void setDomain(String domain) {
        this.domain = domain;
    }
    
    public String getDomain() {
        return domain;
    }
    
    public void setPort(Integer port) {
        this.port = port;
    }
    
    public Integer getPort() {
        return port;
    }
    
    public void setUser(String user) {
        this.user = user;
    }
    
    public String getUser() {
        return user;
    }
    
    public void setPass(String pass) {
        this.pass = pass;
    }
    
    public String getPass() {
        return pass;
    }
    
    public void setAuth(boolean auth) {
        this.auth = auth;
    }
    
    public boolean getAuth() {
        return auth;
    }
    
    public void setStarttls(boolean starttls) {
        this.starttls = starttls;
    }
    
    public boolean getStarttls() {
        return starttls;
    }
    
    public void setUseSSL(boolean useSSL) {
        this.useSSL = useSSL;
    }
    
    public boolean getUseSSL() {
        return useSSL;
    }
    
    public boolean getInSaving() {
        return inSaving;
    }
    
    public void save(AjaxBehaviorEvent event) throws AbortProcessingException {
        boolean abort = false;
        if (!loggedOn) {
            if (unlockPassword.trim().isEmpty()) {
                addMessage(SV_ERROR, "unlockPasswordEmpty");
                abort = true;
            }
            if (!unlockPassword.trim().isEmpty() && !unlockPassword.equals(masterPassword)) {
                addMessage(SV_ERROR, "unlockPasswordIncorrect");
                abort = true;
            }
        }
        if (abort) {
            return;
        }
        if ((domain != null && domain.isEmpty()) || domain == null) {
            domain = "localhost";
        }
        if ((host != null && host.isEmpty()) || host == null) {
            host = "localhost";
        }
        if (port == null || (port != null && port < 25)) {
            port = 25;
        }
        try {
            FileOutputStream out = new FileOutputStream(configPath);
            Properties prop = new Properties();
            prop.setProperty("domain", domain);
            prop.setProperty("host", host);
            prop.setProperty("port", String.valueOf(port));
            prop.setProperty("user", user);
            prop.setProperty("pass", (pass.trim().isEmpty()) ? passBackup : pass);
            prop.setProperty("auth", String.valueOf(auth));
            prop.setProperty("starttls", String.valueOf(starttls));
            prop.setProperty("useSSL", String.valueOf(useSSL));
            prop.store(out, null);
            out.close();
            mailer.loadConfig();
        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, null, e);
            return;
        }
        inSaving = true;
    }
}
